generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(uuid())
  googleId                String?                @unique
  name                    String
  surname                 String?
  email                   String                 @unique
  password                String?
  sex                     Sex?
  born                    DateTime?
  height                  Float?
  weight                  Float?
  profession              String?
  physical_activity_level PhysicalActivityLevel?
  type_training           TypeTraining?
  objective               Objective?

  meals              Meals[]
  physicalAssessment PhysicalAssessment?
}

enum Sex {
  Masculino
  Feminino
  Alienigina
}

enum PhysicalActivityLevel {
  Sedentario  @map("Pouco_exercicio")
  Leve        @map("Atividade_leve")
  Moderado    @map("Exercicio_moderado")
  Muito_Ativo @map("Exercicio_intenso")
  Extremo     @map("Fisico_exigente")
}

enum Objective {
  Perder_peso  @map("Perder")
  Manter_peso  @map("Manter")
  Ganhar_massa @map("Ganhar")
}

enum TypeTraining {
  Nenhuma    @map("Nenhuma")
  Musculacao @map("Musculacao")
  Cardio     @map("Cardio")
  Funcional  @map("Funcional")
  HIIT       @map("HIIT")
  Crossfit   @map("Crossfit")
  Pilates    @map("Pilates")
  Yoga       @map("Yoga")
  Corrida    @map("Corrida")
  Caminhada  @map("Caminhada")
  Ciclismo   @map("Ciclismo")
  Natacao    @map("Natacao")
  Esportes   @map("Esportes")
  Danca      @map("Danca")
  Lutas      @map("Lutas")
  Casa       @map("Casa")
  Outros     @map("Outros")
}

model Meals {
  id String @id @default(uuid())

  imgUrl      String
  type        TypesMeal
  hourMeal    DateTime  @default(now())
  description String?   @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  AssessmentMeals AssessmentMeals?
}

enum TypesMeal {
  CAFE_DA_MANHA @map("Cafe")
  ALMOCO        @map("Almoco")
  JANTAR        @map("Jantar")
  LANCHE        @map("Lanche")
  PRE_TREINO    @map("PreTreino")
  POS_TREINO    @map("PosTreino")
  CEIA          @map("Ceia")
  OUTRO         @map("Outro")
}

model AssessmentMeals {
  id String @id @default(uuid())

  calories      Int
  proteinsGrams Int
  carbsGrams    Int
  fatsGrams     Int

  mealId String @unique
  meal   Meals  @relation(fields: [mealId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhysicalAssessment {
  id String @id @default(uuid())

  bmi               Float
  bmiClassification String

  bmr  Int
  tdee Int

  dailyCaloricTarget            Int
  dailyCaloricTargetExplanation String @db.Text

  weightGoalRecommendation String @db.Text

  proteinsGrams      Int
  carbohydratesGrams Int
  fatsGrams          Int

  generalRecommendations String @db.Text

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
