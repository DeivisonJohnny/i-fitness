generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(uuid())
  name                    String
  surname                 String
  email                   String                 @unique
  password                String
  sex                     Sex?
  born                    DateTime?
  height                  Float?
  weight                  Float?
  profession              String?
  physical_activity_level PhysicalActivityLevel?
  type_training           TypeTraining?
  objective               Objective?

  meals              Meals[]
  physicalAssessment PhysicalAssessment?
}

enum Sex {
  Masculino
  Feminino
  Alienigina
}

enum PhysicalActivityLevel {
  Sedentario          @map("Pouco ou nenhum exercício, trabalho majoritariamente sentado")
  Levemente_Ativo     @map("Caminhadas ocasionais, atividade leve 1–2x por semana")
  Moderadamente_Ativo @map("Exercícios moderados 3–5x por semana")
  Muito_Ativo         @map("Exercícios intensos 6–7x por semana")
  Extremamente_Ativo  @map("Atividade física pesada diariamente ou trabalho físico exigente (ex: pedreiro, atleta etc.)")
}

enum Objective {
  Perder_peso  @map("Perder peso")
  Manter_peso  @map("Manter peso")
  Ganhar_massa @map("Ganhar massa")
}

enum TypeTraining {
  Nenhuma               @map("Nenhuma")
  Musculacao            @map("Musculação")
  Cardio_Aerobico       @map("Cardio / Aeróbico")
  Treinamento_Funcional @map("Treinamento funcional")
  HIIT                  @map("HIIT (Treino Intervalado de Alta Intensidade)")
  Crossfit
  Pilates
  Yoga
  Corrida
  Caminhada
  Ciclismo
  Natacao               @map("Natação")
  Esportes_Coletivos    @map("Esportes coletivos (futebol, vôlei, basquete etc.)")
  Danca_Zumba           @map("Dança / Zumba")
  Lutas_Artes_Marcial   @map("Lutas / Artes marciais (jiu-jitsu, muay thai, boxe etc.)")
  Treino_Em_Casa        @map("Treino em casa (sem equipamentos)")
  Outros                @map("Outros (campo de texto para personalizar)")
}

model Meals {
  id String @id @default(uuid())

  imgUrl      String
  type        TypesMeal
  hourMeal    DateTime  @default(now())
  description String?   @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  AssessmentMeals AssessmentMeals?
}

enum TypesMeal {
  CAFE_DA_MANHA @map("Café da manhã")
  ALMOCO        @map("Almoço")
  JANTAR        @map("Jantar")
  LANCHE        @map("Lanche")
  PRE_TREINO    @map("Pré-treino")
  POS_TREINO    @map("Pós-treino")
  CEIA          @map("Ceia")
  OUTRO         @map("Outro")
}

model AssessmentMeals {
  id String @id @default(uuid())

  calories      Int
  proteinsGrams Int
  carbsGrams    Int
  fatsGrams     Int

  mealId String @unique
  meal   Meals  @relation(fields: [mealId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhysicalAssessment {
  id String @id @default(uuid())

  bmi               Float
  bmiClassification String

  bmr  Int
  tdee Int

  dailyCaloricTarget            Int
  dailyCaloricTargetExplanation String @db.Text

  weightGoalRecommendation String @db.Text

  proteinsGrams      Int
  carbohydratesGrams Int
  fatsGrams          Int

  generalRecommendations String @db.Text

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
